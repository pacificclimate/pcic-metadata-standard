#!python
from argparse import ArgumentParser
import sys
from pkg_resources import resource_filename

import pcic_metadata_standard
from pcic_metadata_standard.loaders import load_all_metadata_sets
from pcic_metadata_standard.visitors import AttributeListVisitor, PrintVisitor


def args_dict(args, names):
    """Return a dict containing arguments selected by name
    from the ``args`` parameter.
    """
    return {name: getattr(args, name) for name in names
            if getattr(args, name, AttributeError) != AttributeError}

def list_attributes_simple(metadata_sets, args):
    attribute_list_visitor = AttributeListVisitor(
        **args_dict(args, ['prefix_separator'])
    )
    metadata_set = metadata_sets[args.set_name]
    metadata_set.accept(attribute_list_visitor)
    for name in attribute_list_visitor.attributes:
        print(name)


def list_attributes(metadata_sets, args):
    print_visitor = PrintVisitor(
        **args_dict(args, ['prefix_separator'])
    )
    metadata_set = metadata_sets[args.set_name]
    metadata_set.accept(print_visitor)


def list_metadata_set_names(metadata_sets, args):
    for name in metadata_sets.keys():
        print(name)


if __name__ == '__main__':
    main_parser = ArgumentParser()
    main_parser.add_argument(
        '-a', '--atomics',
        help='Filepath of atomics data directory to load',
        default=resource_filename(
            pcic_metadata_standard.__name__, 'data/atomic')
    )
    main_parser.add_argument(
        '-c', '--composites',
        help='Filepath of composites definition file to process',
        default=resource_filename(
            pcic_metadata_standard.__name__,
            'data/composite/all_composites.yaml'
        )
    )

    subparsers = main_parser.add_subparsers()

    # sub-command: attributes
    attributes_parser = subparsers.add_parser(
        'attributes',
        help='List attribute names in a metadata set'
    )
    attributes_parser.add_argument(
        'set_name',
        help='Name of metadata attribute set'
    )
    attributes_parser.add_argument(
        '-p', '--prefix-separator', dest='prefix_separator',
        default='__',
        help='Name of metadata attribute set'
    )
    attributes_parser.set_defaults(action=list_attributes)

    # sub-command: foo
    foo_parser = subparsers.add_parser(
        'list',
        help='Simple list of attribute names in a metadata set'
    )
    foo_parser.add_argument(
        'set_name',
        help='Name of metadata attribute set'
    )
    foo_parser.add_argument(
        '-p', '--prefix-separator', dest='prefix_separator',
        default='__',
        help='Name of metadata attribute set'
    )
    foo_parser.set_defaults(action=list_attributes_simple)

    # sub-command: sets
    sets_parser = subparsers.add_parser(
        'sets',
        help='List names of defined metadata sets'
    )
    sets_parser.set_defaults(action=list_metadata_set_names)


    # Parse args and dispatch to action handler
    args = main_parser.parse_args()
    metadata_sets = load_all_metadata_sets(args.atomics, args.composites)
    exit_status = args.action(metadata_sets, args)
    sys.exit(exit_status)
